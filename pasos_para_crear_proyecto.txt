=================================================================================
PASOS PARA CREAR UN PROYECTO DE MENÚ DE RESTAURANTE EN FLUTTER
=================================================================================

REQUISITOS PREVIOS:
------------------
- Flutter SDK: 2.19.0 o superior
- Dart SDK: 2.19.0 o superior
- Android Studio o VS Code instalado
- Emulador Android o dispositivo físico (opcional para pruebas)

PASO 1: CONFIGURACIÓN INICIAL DEL PROYECTO
------------------------------------------
1. Abrir una terminal o línea de comandos
2. Crear un nuevo proyecto Flutter:
   ```
   flutter create restaurant_menu_app
   ```
3. Navegar al directorio del proyecto:
   ```
   cd restaurant_menu_app
   ```
4. Abrir el archivo pubspec.yaml y agregar las dependencias necesarias:
   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     cupertino_icons: ^1.0.5
     google_fonts: ^4.0.4
     provider: ^6.0.5
     cached_network_image: ^3.2.3
   ```
5. Ejecutar el siguiente comando para instalar las dependencias:
   ```
   flutter pub get
   ```

PASO 2: ESTRUCTURA DE DIRECTORIOS
---------------------------------
1. Crear la siguiente estructura de directorios dentro de la carpeta lib:
   ```
   lib/
   ├── models/
   ├── screens/
   ├── widgets/
   └── utils/
   ```
2. Crear un directorio para las imágenes:
   ```
   mkdir -p assets/images
   ```
3. Actualizar el archivo pubspec.yaml para incluir los assets:
   ```yaml
   flutter:
     uses-material-design: true
     assets:
       - assets/images/
   ```

PASO 3: CREAR LOS MODELOS DE DATOS
----------------------------------
1. Crear el archivo lib/models/menu_item.dart con las clases MenuItem y MenuCategory
2. Crear el archivo lib/models/menu_data.dart con datos de ejemplo para el menú

PASO 4: CREAR LOS WIDGETS PERSONALIZADOS
----------------------------------------
1. Crear el archivo lib/widgets/category_card.dart para mostrar las categorías
2. Crear el archivo lib/widgets/recommended_item_card.dart para mostrar los elementos recomendados

PASO 5: CREAR LAS PANTALLAS PRINCIPALES
---------------------------------------
1. Crear el archivo lib/screens/home_screen.dart para la pantalla principal
2. Crear el archivo lib/screens/menu_category_screen.dart para mostrar los elementos de cada categoría

PASO 6: IMPLEMENTAR EL PUNTO DE ENTRADA DE LA APLICACIÓN
-------------------------------------------------------
1. Modificar el archivo lib/main.dart para configurar la aplicación y su tema

PASO 7: IMPLEMENTACIÓN DE LOS CUSTOM MENUS
------------------------------------------
1. Drawer Menu (Menú Lateral):
   - Implementado en home_screen.dart usando el widget Drawer
   - Incluye opciones como Inicio, Menú Completo, Recomendaciones, etc.

2. Bottom Navigation Bar:
   - Implementado en home_screen.dart usando el widget BottomNavigationBar
   - Incluye íconos para Inicio, Menú, Carrito y Perfil

3. Modal Bottom Sheet:
   - Implementado en home_screen.dart y menu_category_screen.dart
   - Se muestra al hacer clic en un elemento del menú
   - Muestra detalles completos del platillo, ingredientes y opciones

4. Custom Category Menu:
   - Implementado como un ListView horizontal en home_screen.dart
   - Muestra las categorías de alimentos con imágenes y nombres

PASO 8: EJECUTAR Y PROBAR LA APLICACIÓN
---------------------------------------
1. Conectar un dispositivo Android o iniciar un emulador
2. Ejecutar la aplicación:
   ```
   Se puede abrir en android studio simplemente intalar las extensiones
   de dart y flutter y ejecutar el proyecto con el play o
   flutter run
   ```
3. Alternativas para ejecutar:
   - En navegador web: `flutter run -d chrome`
   - En emulador específico: `flutter run -d <id-del-emulador>`
   - En modo release: `flutter run --release`

PASO 9: SOLUCIÓN DE PROBLEMAS COMUNES
------------------------------------
1. Problemas con las licencias de Android:
   - Ejecutar `flutter doctor --android-licenses` y aceptar todas las licencias
   - O abrir Android Studio > SDK Manager > SDK Tools y aceptar licencias

2. Errores de dependencias:
   - Ejecutar `flutter pub get` para actualizar las dependencias
   - Verificar que las versiones sean compatibles

3. Problemas con el emulador:
   - Verificar que el emulador esté en ejecución
   - Reiniciar el emulador si es necesario

4. Errores de compilación:
   - Ejecutar `flutter clean` y luego `flutter pub get`
   - Verificar errores en el código

NOTAS ADICIONALES:
-----------------
- El proyecto implementa un menú de restaurante con categorías, elementos y detalles
- Se utilizan widgets como Column, Row, Stack y Container para la disposición
- Se implementan diferentes tipos de menús como parte del trabajo de investigación
- Las imágenes se cargan desde URLs externas, asegúrate de tener conexión a Internet
- El diseño es responsivo y se adapta a diferentes tamaños de pantalla

=================================================================================
